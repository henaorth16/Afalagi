generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  name          String?
  createdAt     DateTime        @default(now())
  emailVerified Boolean         @default(false)
  image         String?
  updatedAt     DateTime        @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  MissingPerson MissingPerson[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model MissingPerson {
  id            String   @id @default(cuid())
  fullName      String
  gender        Gender
  dob           DateTime
  lastSeenDate  DateTime
  lastSeenPlace String
  clothing      String? // description of what they were wearing
  physicalMarks String? // scars, tattoos, etc.
  description   String? // general info or notes
  reward        Float? // optional reward amount
  photoUrl      String? // uploaded image path or URL

  status     MissingStatus @default(ACTIVE)
  reporterId String
  reporter   User          @relation(fields: [reporterId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender {
  MALE
  FEMALE
  // OTHER 
}

enum MissingStatus {
  ACTIVE // currently missing
  FOUND // found and safe
  CLOSED // case closed
}
